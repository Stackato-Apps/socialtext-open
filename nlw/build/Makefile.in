# Makefile                                                        -*- make -*-
# @COPYRIGHT@
#
# This Makefile is the center of the Socialtext build and install
# system.  It also has a number of convienence targets which aid
# in day-to-day development and maintenance.
#
# Make Docs: http://www.gnu.org/software/make/manual/make.html

DESTDIR = @DESTDIR@
PREFIX  = $(DESTDIR)@PREFIX@

# User/group who should own certain files, like init scripts.
ROOT_USER  = @ROOT_USER@
ROOT_GROUP = @ROOT_GROUP@

# Special user/group who runs the web service and must own certain files.
ST_USER  = @ST_USER@
ST_GROUP = @ST_GROUP@

# Unix user as whom we must create the database user.
DB_SUPERUSER = @DB_USER@

# The program used to actually write files and directories out to disk.
INSTALL      = @INSTALL_PROG@
INSTALL_ROOT = $(INSTALL)
INSTALL_ST   = $(INSTALL) -o $(ST_USER) -g $(ST_GROUP)

# Install locations
ST_INSTALL_DIR  = $(PREFIX)@SHAREDIR@
INSTALL_LIB     = $(PREFIX)@LIBDIR@
INSTALLSCRIPT   = $(PREFIX)@BINDIR@

# Perl location
PERL = @PERL@

# Testing
PROVE_ARGS =
PROVE = nice st-prove --timer --state=save $(PROVE_ARGS)
TEST_JOBS = 4
SERIAL_UNIT_TESTS = $(shell grep -l 'fixtures(.*serial.*)' -r t | grep '\.t$$' | grep -v '^t/live/' | dev-bin/fixture-sort)
PARALLEL_UNIT_TESTS = $(shell grep -L 'fixtures(.*serial.*)' -r t | grep '\.t$$' | grep -v '^t/live/' | dev-bin/fixture-sort)
JS_TESTS  = $(shell find -L t/ -name '*.t.js')
COFFEE_TESTS  = $(shell find -L t/ -name '*.t.coffee')
WIKID_TESTS = $(shell find -L t/wikitests/ -name '*.wiki')

# Program locations
STCTL          = $(PERL) dev-bin/nlwctl
STDB           = $(PERL) bin/st-db
POST_INSTALL   = $(PERL) bin/st-post-install
STCONFIG       = $(PERL) dev-bin/st-config-wrapper
GENCONFIG      = $(PERL) dev-bin/gen-config
CREATE_DB_USER = $(PERL) dev-bin/create-db-user

# File sets that can be installed (use install-files to get all files)
INSTALL_BASE = install-html       \
	       install-template	  \
               install-l10n \
	       install-javascript \
	       install-images \
	       install-sass \
               install-fonts      \
               install-node_modules \
               install-migrations \
               install-post-install \
               install-desktop \
	       install-workspaces \
	       install-static-config\
	       install-themes

INSTALL_FILE_TARGETS = $(INSTALL_BASE)

INSTALL_PKGS_TARGETS = install-pkgs-dapper \
                       install-pkgs-breezy \
                       install-pkgs-dapper-dev

# Configuration targets for $(GENCONFIG)
CONF_TARGETS = apache-config      \
               apache-perl-config \
               nginx-config       \
               app-config         \
               ssl-config

# Directories to be installed
DATA_ROOT_DIR    = $(PREFIX)@WEBROOT@
DOCUMENT_ROOT    = $(PREFIX)@WEBROOT@/docroot
STORAGE_DIR      = $(DATA_ROOT_DIR)/storage
CACHE_DIR        = $(PREFIX)@CACHEDIR@
CRON_DIR         = $(PREFIX)/etc/cron.d
SPOOL_DIR        = $(PREFIX)@SPOOLDIR@
ST_CONFIG_DIR	 = $(PREFIX)/etc/socialtext
SCHEMA_DIR	 = $(ST_CONFIG_DIR)/db
INSTALLED_DIRS   = $(ST_INSTALL_DIR)   \
                   $(DATA_ROOT_DIR)    \
		   $(STORAGE_DIR)      \
                   $(DOCUMENT_ROOT)    \
		   $(CACHE_DIR)        \
		   $(CRON_DIR)         \
                   $(PREFIX)@PIDDIR@   \
		   $(SPOOL_DIR)        \
		   $(SCHEMA_DIR)       \
		   $(SPOOL_DIR)/ceq    \
                   $(PREFIX)@HTTPD_LOCKDIR@ \
                   $(PREFIX)@HTTPD_LOGDIR@  \
                   $(PREFIX)@HTTPD_PIDDIR@  \
                   $(PREFIX)@HTTPD_CONFDIR@/conf.d \
                   $(PREFIX)/var/log/nlw-psgi  \
                   $(PREFIX)/etc/nlw-psgi

# Makefile generated by Makefile.PL via configure
PERL_MAKEFILE  = build/tmp/Makefile.perl
PERL_MAKE      = $(MAKE) -f $(PERL_MAKEFILE)

# DB Testing Command
DB_USER = nlw
DB_LOGIN_TEST = $(SUDO) -u $(ST_USER) build/bin/db-login-test $(DB_USER)

# Empty string if we're upgrading, otherwise a non-zero length string.
FRESH_INSTALL_P=@FRESH_INSTALL@

# Common commands
RM           = rm -f
CP           = cp
FIND         = find
SUDO         = sudo
CHOWN        = chown
CHMOD        = chmod
MKDIR        = mkdir -p
RM_DIR       = $(RM) -R
CP_DIR       = $(CP) -pr
CHOWN_DIR_ST = $(CHOWN) -R $(ST_USER):$(ST_GROUP)
NOOP         = true

##############################################################################

# The first declared target is the one used when you do `make` by itself
# `@` in front of a command tells make not to print the command

default:
	$(PERL_MAKE)

dev: dev-env
env: dev-env
dev-env: dev-bin/fresh-dev-env-from-scratch
	$<

PKGDIST=$(subst install-pkgs-,,$@)
$(INSTALL_PKGS_TARGETS): install-ok
	$(SUDO) apt-get install `cat build/pkg-lists/$(PKGDIST)`

# Used by the Debian package system, which needs to run some of the installer
# bits in a different order.
debian: install-dirs      \
        install-files     \
        install-perl      \
	install-bin       \
        install-appliance-bin \
        install-debian

install-debian:
	$(MKDIR) $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) dev-bin/create-db-user $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) dev-bin/gen-config $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) dev-bin/manage-certs $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) dev-bin/setup-postgres-permissions $(ST_INSTALL_DIR)/debian/bin/
	$(INSTALL_ROOT) build/bin/db-login-test $(ST_INSTALL_DIR)/debian/bin/
	$(MKDIR) $(ST_INSTALL_DIR)/debian/build/
	$(CP_DIR) build/templates $(ST_INSTALL_DIR)/debian/build
	$(MKDIR) $(ST_INSTALL_DIR)/debian/build/static
	$(CP_DIR) build/static/nginx $(ST_INSTALL_DIR)/debian/build/static

install-appliance-bin: install-ok
	$(INSTALL_ROOT) `$(FIND) appliance-bin/ -maxdepth 1 -type f` $(INSTALLSCRIPT)

# Used by OSR installs
install: install-ok         \
         shared-install     \
         osr-apache

shared-install: install-ok  \
         remove-old-install \
         db-user            \
         install-dirs       \
         install-files      \
         install-perl       \
	 install-bin       \
         config             \
         schema             \
	 initialize-st-migrate \
	 run-post-install

# Run st-migrate --initialize if this is a fresh install
initialize-st-migrate:
	if [ ! -f $(ST_CONFIG_DIR)/migration.state ]; \
	then \
	    st-migrate --initialize; \
	fi

# If a target does install tasks, make this a dependency, then it will fail if
# /etc/dont-install-nlw-here exists.
install-ok:
	[ ! -e /etc/dont-install-nlw-here ] || [ -e configure-stamp ]

db-user:
	$(SUDO) -u $(DB_SUPERUSER) $(CREATE_DB_USER)
	$(DB_LOGIN_TEST) template1

install-perl: install-ok
	$(PERL_MAKE) install

config: install-ok \
        app-config \
        ssl-config

osr-apache: install-ok config
	$(GENCONFIG) --sitewide --hostname=@HOSTNAME@

st-apache: install-ok config apache-config

TARG=$(subst -config,,$@)
$(CONF_TARGETS): install-ok
	$(GENCONFIG) --sitewide --target=$(TARG)

install-schema-files: install-ok
	$(INSTALL_ROOT) -m 644 etc/socialtext/db/* $(SCHEMA_DIR)

schema: install-ok
	$(SUDO) touch /var/log/st-db.log
	$(SUDO) chown $(DB_SUPERUSER) /var/log/st-db.log
	$(SUDO) -u $(DB_SUPERUSER) $(STDB) sync
	$(DB_LOGIN_TEST) template1 NLW

install-files: install-ok         \
               $(ST_INSTALL_DIR)  \
               favicon            \
               install-base       \
	       mecab              \
	       install-schema-files \
	       install-nlw-psgi \
               $(INSTALL_FILE_TARGETS)

FIXIN = `which $(PERL)` -pi -e '$$_ = qq[\#!$$^X$$/] if $$. == 1'

install-nlw-psgi: install-ok
	$(INSTALL_ST) -d $(PREFIX)/etc/nlw-psgi
	$(CHOWN_DIR_ST) $(PREFIX)/etc/nlw-psgi
	$(INSTALL_ST) run $(PREFIX)/etc/nlw-psgi
	$(FIXIN) $(PREFIX)/etc/nlw-psgi/run
	$(INSTALL_ST) nlw.psgi $(PREFIX)/etc/nlw-psgi
	$(FIXIN) $(PREFIX)/etc/nlw-psgi/nlw.psgi

DIR=$(subst install-,,$@)
$(INSTALL_FILE_TARGETS): install-ok 
	@[ "$(DIR)" = "l10n" ] && ./dev-bin/l10n-make-po-js || true
	$(INSTALL_ST) -d $(ST_INSTALL_DIR)/$(DIR)
	$(CP_DIR) share/$(DIR) $(ST_INSTALL_DIR)
	$(CHOWN_DIR_ST) $(ST_INSTALL_DIR)/$(DIR)
	$(MKDIR) $(PREFIX)@PIDDIR@
	$(CHOWN_DIR_ST) $(PREFIX)@PIDDIR@
	$(FIND) $(ST_INSTALL_DIR)/$(DIR) -name '.svn' -type d \
	   -exec $(RM_DIR) {} \; 2>/dev/null || $(NOOP)
	$(FIND) $(ST_INSTALL_DIR)/$(DIR) -name '*.in' -type f \
	   -exec $(RM) {} \; 2>/dev/null || $(NOOP)
	$(FIND) $(ST_INSTALL_DIR)/$(DIR) -name '*.test' -type f \
	   -exec $(RM) {} \; 2>/dev/null || $(NOOP)

install-base: install-ok $(INSTALL_BASE)
	ln -f -s $(ST_INSTALL_DIR) $(ST_INSTALL_DIR)/base

mecab: 
	build/bin/convert-mecab-juman-dict-to-utf8 || $(NOOP)

favicon: install-ok $(DATA_ROOT_DIR)
	$(INSTALL_ST) share/favicon.ico $(DATA_ROOT_DIR)/favicon.ico

install-bin: install-ok

# Install all the dirs in one go, but allow per dir dependencies.
$(INSTALLED_DIRS): install-ok install-dirs
$(DATA_ROOT_DIR): install-ok install-dirs
	$(CHMOD) 2775 $(DATA_ROOT_DIR)
install-dirs: install-ok 
	$(INSTALL_ST) -d $(INSTALLED_DIRS)

run-post-install: install-ok
	$(POST_INSTALL)

install-cron-jobs: install-ok
	$(INSTALL_ROOT) -m 644 etc/cron/* $(CRON_DIR)

clean-temps: install-ok clean-cache

clean-cache: clean-formatter-cache clean-tt2-cache

clean-formatter-cache:
	$(RM_DIR) $(CACHE_DIR)/formatter

clean-tt2-cache:
	$(RM_DIR) $(CACHE_DIR)/tt2

CLEANER=if [ -e $(PERL_MAKEFILE) ]; then $(PERL_MAKE) $@; fi; \
        $(RM_DIR) blib/ pm_to_blib build/tmp/* t/tmp*         \
        $(shell build/bin/list-in-files --not-dot-in)         \
        Makefile MANIFEST MANIFEST.bak                        \
	$(shell find debian/ -type d -mindepth 1)             \
	debian/files debian/*.install

clean-in-files:
	rm -f $(shell build/bin/list-in-files --not-dot-in) Makefile

clean:
	$(CLEANER)

realclean:
	$(RM) Socialtext*.tar.gz
	$(CLEANER)

wipe: stop-services realclean uninstall

uninstall: remove-old-install clean-temps
	# XXX: Don't hard code this stuff.
	$(RM_DIR) /var/{run,www,spool,cache}/socialtext
	$(RM) /etc/aliases.deliver

dev-cpan:
	$(SUDO) cpan -i $(shell $(PERL) dev-bin/list-module-deps -u --dev | cut -d ' ' -f 1)

dev-check-deps: dev-check-dependencies
dev-check-dependencies:
	$(PERL) dev-bin/list-module-deps -u --dev

cpan:
	$(SUDO) cpan -i $(shell $(PERL) dev-bin/list-module-deps -u | cut -d ' ' -f 1)

check-deps: check-dependencies
check-dependencies:
	$(PERL) dev-bin/list-module-deps -u

diff:
	svndiff

# These are .PHONY targets so they're always run.
manifest: MANIFEST
MANIFEST:
	$(PERL_MAKE) manifest
	# XXX: Hack a filename because ExtUtils::Manifest can't handle spaces.
	# XXX: Every file with a space in it's name needs to get handled by
	# XXX: this hack explicitely.
	perl -i -p -e 's/^(.*Rule #1)$$/#-#$$1/;s/^(.*O Star\.txt)$$/#-#$$1/' $@

tardist: MANIFEST $(PERL_MAKEFILE)
	$(PERL_MAKE) tardist

test: testreports testconsole testunit testwikid testcoffee testjs

testunit: testunit-parallel testunit-serial

testunit-serial:
	@$(PROVE) --jobs 1 $(SERIAL_UNIT_TESTS)

testunit-parallel:
	@$(PROVE) --jobs $(TEST_JOBS) $(PARALLEL_UNIT_TESTS)

testwikid:
	@$(PROVE) --jobs $(TEST_JOBS) $(WIKID_TESTS)

testjs:
	@$(PROVE) --jobs $(TEST_JOBS) $(JS_TESTS)

testcoffee:
	@$(PROVE) --jobs $(TEST_JOBS) $(COFFEE_TESTS)

testreports:
	@cd ../socialtext-reports/ && $(PROVE) --jobs 1 t/

testconsole:
	@cd ../appliance/libsocialtext-appliance-perl/ && $(PROVE) --jobs 1 t/

testplugin-%:
	@$(PROVE) -s $(shell cd share/plugin/$(@:testplugin-%=%) && find -L t -name '*.t' -not -regex '^t/live.*' | dev-bin/fixture-sort)

testlive:
	@$(PROVE) -r t/live

testall: test testlive

quicktest: .prove
	$(PROVE) --jobs $(TEST_JOBS) $(shell list-tests-faster-than 10)

hottest: .prove
	$(PROVE) --jobs $(TEST_JOBS) --state=hot,fresh,save

hudson-update: .prove

.prove: hudson.prove
	merge-prove hudson.prove .prove

hudson.prove: get-hudson-prove

get-hudson-prove:
	curl --insecure https://lucite.socialtext.net:9080/job/Socialtext-`git branch | perl -ne '@x = split; print $$x[1] if $$x[0] eq "*";'`/lastCompletedBuild/artifact/artifacts/.prove \
        --output hudson.prove 

# cd into custom-workspace-config and make all
custom-workspaces:
	@$(MAKE) -C build/custom-ws-config all

# It would make (no pun intended) my day if this target actually worked:
mac-go:
	./dev-bin/make-mac-go

# Andy's working on a set of Perl::Critic rules
critic:
	perlcritic -3 -q \
	    -profile build/perlcriticrc \
	    lib/ t/ bin/

# `make` assumes targets are files. .PHONY declares targets that are not.
.PHONY: default                  \
        dev                      \
        env                      \
        dev-env                  \
        release                  \
        bundles                  \
        install                  \
        install-ok               \
	shared-install           \
        db-user                  \
        remove-old-install       \
        install-perl             \
        config                   \
        osr-apache               \
        st-apache                \
        schema                   \
        install-files            \
        $(INSTALL_FILE_TARGETS)  \
        $(CONF_TARGETS)          \
        $(INSTALL_PKGS_TARGETS)  \
        install-eventspace-forms \
        install-base             \
        favicon                  \
        install-bin              \
        install-dirs             \
        install-appliance-bin    \
        install-post-install     \
	run-post-install         \
	install-cron-jobs        \
	install-schema-files     \
        upgrade                  \
        stop-start               \
        stop-services            \
        start-services           \
        clean-temps              \
        clean-cache              \
        clean                    \
        clean-in-files           \
        realclean                \
        wipe                     \
        uninstall                \
        dev-cpan                 \
        dev-check-deps           \
        dev-check-dependencies   \
        cpan                     \
        check-deps               \
        check-dependencies       \
        diff                     \
        MANIFEST                 \
        manifest                 \
        tardist                  \
        test                     \
        testlive                 \
        testall                  \
        custom-workspaces        \
	critic                   \
        mac-go	                 \
	get-hudson-prove

