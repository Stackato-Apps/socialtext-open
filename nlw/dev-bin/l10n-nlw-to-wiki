#!/usr/bin/env perl
# @COPYRIGHT@
use strict;
use warnings;
use FindBin qw/$Bin/;
use lib "$Bin/../lib";
use Socialtext::Wikil10n qw/load_existing_l10ns make_rester/;
use Socialtext::System qw/shell_run/;
use Socialtext::File qw/set_contents/;
use Locale::PO;
use File::Find::Rule;
use Cwd;

update_enterprise_features();
link_enterprise_features();

link_enterprise_features();
update_enterprise_features();

my @files = get_files( 
    dirs => [
        "lib/", 
        "share/skin/s3/template", 
        "share/skin/s3/javascript", 
        "share/skin/s3/javascript/template", 
        "share/skin/wikiwyg/javascript/jemplate_wikiwyg/",
        "share/skin/wikiwyg/javascript/jemplate_wikiwyg/element/",
        "share/console-template", 
        "build/templates/socialtext",
        "share/template/authen",
    ],
    extra_dirs => [ # glob() files in these symlinks
        "share/template/control",
        "share/template/email",
    ],
    includes => [
        qr#\.(?:pm|js|tt2)$#, 
        qr#share/skin/s3/template#,
        qr#share/skin/s3/javascript#,
        qr#share/skin/wikiwyg/javascript#,
        qr#share/template/control#,
        qr#share/template/email#,
        qr#share/template/authen#,
        qr#share/console-template/template#,
    ],
    excludes => [
        qr/\b\.svn\b/,
        qr/tiddlytext/,
        qr/socialtext\.js/,
        qr#javascript/test#,
        qr/widget_edit\.tt2/,
    ],
);

my $en_file = "nlw-en.po";
shell_run("dev-bin/l10n-widget-to-js");
call_xgettext( $en_file => @files );
po_to_wiki($en_file);
# unlink $en_file;
exit;

sub update_enterprise_features {
    for my $dir (qw/appliance control/) {
        my $dirname = "$ENV{ST_CURRENT}/$dir";
        my $fulldir = -d $dirname ? $dirname : readlink $dirname;
        if (-d "$fulldir/.git") {
            shell_run("cd $fulldir; git pull --rebase");
        }
        elsif ($ENV{SVN_COMMAND} eq 'svk') {
            shell_run("svk up -s $fulldir");
        }
        else {
            shell_run("svn up $fulldir");
        }
    }
}

sub link_enterprise_features {
   _call_link_control_panel();
   _call_link_console();
}

sub _call_link_control_panel {
    shell_run("dev-bin/link-control-panel");
}

sub _call_link_console {
    shell_run("dev-bin/link-externals --console");
}

sub _get_branch_name {
    my $branch_name = "";
    
    my $curdir = cwd;
    my $branch_regexp = qr/$ENV{HOME}\/src\/st\/(.*?)\/nlw/;

    if($curdir =~ m/$branch_regexp/) {
       $branch_name = $1;
    }
    if($branch_name eq "") {
        die "branch isn't found. you should run this script after run cdnlw.";
    }
    return $branch_name; 
}

sub call_xgettext {
    my ( $lang, @files ) = @_;

    my $tmpfile = "/tmp/gettext.$$";
    set_contents( $tmpfile, join( "\n", @files ) );
    unlink $lang;
    shell_run("cat $tmpfile | xargs xgettext.pl -o $lang");
    unlink $tmpfile;
    die "Expected xgettext.pl to create $lang\n" unless -e $lang;
}

sub get_files {
    my %opts = @_;
    my $dirs  = $opts{dirs};
    my $extra_dirs = $opts{extra_dirs};
    my $excludes = $opts{excludes};
    my $includes = $opts{includes};

    my @files = File::Find::Rule->file()->in(@$dirs);
    for my $dir (@{ $opts{extra_dirs} }) {
        push @files, glob("$dir/*");
    }
    my @new_files;

    FILE: for my $file (@files) {
        for my $rx (@$excludes) {
           next FILE if $file =~ $rx;
        }
        for my $rx (@$includes) {
            next unless $file =~ $rx;
            push @new_files, $file;
            last;
        }
    }

    return @new_files;
}


sub po_to_wiki {
    my $pos = Locale::PO->load_file_asarray(shift);
    my $r = make_rester();

    print "Fetching pages tagged l10n...\n";
    my @locale_pages = $r->get_taggedpages('l10n');
    if (@locale_pages == 0) {
        my $page = 'Socialtext - english';
        $r->put_page($page, 'no strings yet...');
        $r->put_pagetag($page, 'l10n');
        $r->put_pagetag($page, 'locale=en');
        push @locale_pages, $page;
    }

    for my $title (@locale_pages) {
        print "Updating localizations for - $title\n";
        my $existing_pos = load_existing_l10ns($r, $title);

        my $new_page = <<EOT;
This page is autogenerated, only edit the 'translation' column.

| *Key* | *Translation* | *Reference* | *Other* |
EOT
        for my $po (@$pos) {
            my $msgid = $po->msgid or die "No msgid?";
            $msgid =~ s/^"(.*)"$/$1/;
            next unless $msgid;
            my $msgstr = $existing_pos->{$msgid}{msgstr} || '';

            # Trim off the line number, because it changes frequently
            # and is very noisy
            (my $ref = $po->reference || '') =~ s/:\d+(\s?)/$1/g;

            $new_page .= "| "
                . join( ' | ', 
                    $msgid,
                    $msgstr,
                    $ref,
                    $po->automatic || '' )
                . " |\n";
        }
        $r->put_page($title, $new_page);
    }
}

