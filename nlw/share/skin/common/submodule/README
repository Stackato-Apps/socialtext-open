The submodule directory in the 'socialtext' repository is where we put git submodules. Submodules are the git way to include third party repositories in your project repo. For Socialtext this is where we can keep git hosted Open Source modules that we sometimes/often hack on. This might include Dan's SocialCalc code or Ingy's Jemplate stuff as examples. 

In order for all the ST devs to be able to hack on the submodules, all the modules in this directory are github/socialtext forks of the original author's modules. If you want to add a submodule, you first need to email johnt a request to fork it. Send the request to: sysadmin@socialtext.com. Then add the submodule like this:

    > cdcur
    > git submodule add git@github.com:socialtext/foo-bar.git submodule/foo-bar
    > git commit -m 'Added submodule foo-bar'

^^ Submodule basics

Submodules are separate repos that are checked out under your parent repo. The parent just keeps track of the repo url and the sha1 of the particular revision that the submodule is at. Submodules are always set at a certain revision. Pulling the parent will have no effect on the submodule. This is good because you can't accidentally upgrade a module to a new broken/different version. In order to get the new version of a submodule, you need to 'git submodule update' it, then you need to commit that fact in the parent.

^^ Rules for using submodules

* Adding a new submodule needs to be done from the top level directory of the parent.
* When you change a submodule, always commit and push the changes to the submodule first, then commit the fact that the submodule has changed in the parent repo.
* Don't run 'git submodule update' if you've made and committed changes within a submodule without checking out a branch first. They will be silently overwritten.
** Be aware that 'rb' currently runs 'git submodule update'.

^^ Links about submodules

* http://git.or.cz/gitwiki/GitSubmoduleTutorial
* http://book.git-scm.com/5_submodules.html
* http://gitcasts.com/posts/git-submodules
